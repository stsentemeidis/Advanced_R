##################################################################################################################################
######################################## SPLIT TRAINING AND TEST DATA ############################################################
split_train_test <- function(df, seed_split, train_size){
  set.seed(seed_split)
  train.size <- train_size
  train.index <- sample.int(nrow(df), round(nrow(df)) * train.size)
  trainingData <- df[train.index,]
  testData <- df[-train.index,]
  assign("trainingData", trainingData, envir = .GlobalEnv)
  assign("testData", testData, envir = .GlobalEnv)
}


##################################################################################################################################
########################################  TRAIN & CROSS VALIDATION  ##############################################################

model_train_cv <- function(formula, trainingData, method_valid = 'cv', n=10,  method_train = 'glm', family_train = 'binomial'){
  
  train_control <- trainControl(
    method = method_valid,
    number = n,
    savePredictions = TRUE
  )
  ################################################################################   
  grid_search <- expand.grid(nrounds = c(100,200),  # this is n_estimators in the python code above
                             max_depth = c(10, 15, 20, 25),
                             colsample_bytree = seq(0.5, 0.9, length.out = 5),
                             eta = 0.1,
                             gamma=0,
                             min_child_weight = 1,
                             subsample = 1
  )
  ################################################################################    
  model_0 <- train(formula, 
                   data=trainingData, 
                   trControl=train_control, 
                   method = method_train,
                   tuneGrid = 
                    )
  
  return(summary(model_0))
  return(varImp(model_0))
  
}

##################################################################################################################################
########################################  TEST & PREDICTIONS   ###################################################################

model_test <- function(model_to_test, testData, target, type_predict = 'prob', threshold = 0.5){
  
  fitted.results_0 <- predict(model_to_test, newdata=testData, type = type_predict) 
  misClasificError_0 <- mean(fitted.results_0 != testData[,target])
  return(print(paste('Accuracy',1-misClasificError_0)))
}